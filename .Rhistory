film_noms_merged = rbind(film_noms_merged, sample_n(filter(excluded_imdb, weighted_average_vote < 2.5), 500))
film_noms_merged = rbind(film_noms_merged, sample_n(filter(excluded_imdb, weighted_average_vote >= 2.5 & weighted_average_vote < 5), 500))
film_noms_merged = rbind(film_noms_merged, sample_n(filter(excluded_imdb, weighted_average_vote >= 5 & weighted_average_vote < 7.5), 500))
film_noms_merged = rbind(film_noms_merged, sample_n(filter(excluded_imdb, weighted_average_vote >= 7.5 & weighted_average_vote <= 10), 500))
table(film_noms_merged$no_of_nominations)
# done with the cleaning part.
freq_model = glm(no_of_nominations ~ weighted_average_vote, film_noms_merged, family = poisson)
summary(freq_model)
hist(film_noms_merged$no_of_nominations,
xlab = "Number of Nominations",
main = "Distribution of Oscar Nomination Count")
freq_model$model$fitted <- predict(freq_model, type = "response")
# ggplot2 Plot:
ggplot(freq_model$model) +
theme_fivethirtyeight() +
geom_point(aes(weighted_average_vote, no_of_nominations), size = 1) +
geom_line(aes(weighted_average_vote, fitted), color = "dark red", alpha = 2) +
labs(x = "\n IMDb Average Ratings", y = "Number of Oscar Nominations \n",
title = "Frequentist Poisson: Average Ratings vs Nominations \n") +
theme(plot.title = element_text(hjust = 0.5),
axis.title.x = element_text(face="bold", size = 11),
axis.title.y = element_text(face="bold", size = 11))
# https://www.bayesrulesbook.com/chapter-12.html#ch12-simulation
# Monte Carlo Markov Chain to simulate the prior
# https://www.bayesrulesbook.com/chapter-6.html#markov-chains-via-rstan
# prior intercept (starting point for nominations) is at 1.
# prior slope is around 0.5, sd = 0.25
bayes_model_prior <- stan_glm(no_of_nominations ~ weighted_average_vote,
data = film_noms_merged,
family = poisson,
prior_intercept = normal(1, 0.5, autoscale = TRUE),
prior = normal(0.5, 0.25, autoscale = TRUE),
chains = 2, iter = 5000*2, seed = 130500,
prior_PD = TRUE)
prior_summary(bayes_model_prior)
film_noms_merged %>%
add_fitted_draws(bayes_model_prior, n = 100) %>%
ggplot(aes(x = weighted_average_vote, y = no_of_nominations)) +
theme_fivethirtyeight() +
geom_line(aes(y = .value, group = .draw), alpha = 0.5) +
ylim(0, 20) +
theme(plot.title = element_text(hjust = 0.5),
axis.title.x = element_text(face="bold", size = 11),
axis.title.y = element_text(face="bold", size = 11))
bayes_model <- update(bayes_model_prior, prior_PD = FALSE)
# references: https://biostat.app.vumc.org/wiki/pub/Main/StatisticalComputingSeries/bayes_reg_rstanarm.html
summary(bayes_model)
# check fit vs distribution of data.
pp_check(bayes_model)
posterior_vs_prior(bayes_model, pars=c("weighted_average_vote"), group_by_parameter = TRUE)
stan_hist(bayes_model, pars=c("weighted_average_vote"), bins=40) + ggtitle("Histogram of posterior slope")
stan_hist(bayes_model, pars=c("(Intercept)"), bins=40) + ggtitle("Histogram of posterior intercept")
film_noms_merged %>%
add_fitted_draws(bayes_model, n = 100) %>%
ggplot(aes(x = weighted_average_vote, y = no_of_nominations)) +
theme_fivethirtyeight() +
geom_line(aes(y = .value, group = .draw),
alpha = .1, size = 0.1, color = "#3C2FDE") +
geom_point(data = film_noms_merged, size = 1) +
labs(x = "\n IMDb Average Ratings", y = "Number of Oscar Nominations \n",
title = "Bayesian Poisson: Average Ratings vs Nominations \n") +
theme(plot.title = element_text(hjust = 0.5),
axis.title.x = element_text(face="bold", size = 11),
axis.title.y = element_text(face="bold", size = 11))
bayes_model_prior_2 <- stan_glm(no_of_nominations ~ weighted_average_vote + genre,
data = film_noms_merged,
family = poisson,
prior_intercept = normal(1, 0.5, autoscale = TRUE),
prior = normal(0.5, 0.25, autoscale = TRUE),
chains = 1, iter = 3000*2, seed = 130500,
prior_PD = TRUE)
bayes_model_prior_2 <- stan_glm(no_of_nominations ~ weighted_average_vote + genre,
data = film_noms_merged,
family = poisson,
prior_intercept = normal(1, 0.5, autoscale = TRUE),
prior = normal(0.5, 0.25, autoscale = TRUE),
chains = 1, iter = 3000*2, seed = 130500,
prior_PD = TRUE)
prior_summary(bayes_model_prior_2)
film_noms_merged %>%
add_fitted_draws(bayes_model_prior_2, n = 100) %>%
ggplot(aes(x = weighted_average_vote, y = no_of_nominations)) +
theme_fivethirtyeight() +
geom_line(aes(y = .value, group = .draw), alpha = 0.5) +
ylim(0, 20) +
theme(plot.title = element_text(hjust = 0.5),
axis.title.x = element_text(face="bold", size = 11),
axis.title.y = element_text(face="bold", size = 11))
bayes_model_prior_2 <- stan_glm(no_of_nominations ~ weighted_average_vote + genre,
data = film_noms_merged,
family = poisson,
prior_intercept = normal(1, 0.5, autoscale = TRUE),
prior = normal(0.5, 0.25, autoscale = TRUE),
chains = 1, iter = 3000*2, seed = 130500,
prior_PD = TRUE)
bayes_model_2 <- update(bayes_model_prior_2, prior_PD = FALSE)
film_noms_merged %>%
add_fitted_draws(bayes_model_2, n = 100) %>%
ggplot(aes(x = weighted_average_vote, y = no_of_nominations)) +
theme_fivethirtyeight() +
geom_line(aes(y = .value, group = .draw),
alpha = .1, size = 0.1, color = "#3C2FDE") +
geom_point(data = film_noms_merged, size = 1) +
labs(x = "\n IMDb Average Ratings", y = "Number of Oscar Nominations \n",
title = "Bayesian Poisson: Average Ratings vs Nominations \n") +
theme(plot.title = element_text(hjust = 0.5),
axis.title.x = element_text(face="bold", size = 11),
axis.title.y = element_text(face="bold", size = 11))
film_noms_merged %>%
add_fitted_draws(bayes_model_2, n = 100) %>%
ggplot(aes(x = weighted_average_vote, y = no_of_nominations)) +
theme_fivethirtyeight() +
geom_line(aes(y = .value, group = .draw),
alpha = .1, size = 0.1, color = genre) +
geom_point(data = film_noms_merged, size = 1) +
labs(x = "\n IMDb Average Ratings", y = "Number of Oscar Nominations \n",
title = "Bayesian Poisson: Average Ratings vs Nominations \n") +
theme(plot.title = element_text(hjust = 0.5),
axis.title.x = element_text(face="bold", size = 11),
axis.title.y = element_text(face="bold", size = 11))
film_noms_merged %>%
add_fitted_draws(film_noms_merged, n = 50) %>%
ggplot(aes(x = weighted_average_vote, y = no_of_nominations, color = genre)) +
geom_line(aes(y = .value, group = paste(genre, .draw)),
alpha = .1) +
geom_point(data = film_noms_merged, size = 0.1)
film_noms_merged %>%
add_fitted_draws(film_noms_merged, n = 50)
film_noms_merged %>%
add_fitted_draws(film_noms_merged, n = 50) %>%
ggplot(aes(x = weighted_average_vote, y = no_of_nominations, color = genre)) +
geom_line(aes(y = .value, group = paste(genre, .draw)),
alpha = .1) +
geom_point(data = film_noms_merged, size = 0.1)
film_noms_merged %>%
add_epred_draws(film_noms_merged, n = 50) %>%
ggplot(aes(x = weighted_average_vote, y = no_of_nominations, color = genre)) +
geom_line(aes(y = .value, group = paste(genre, .draw)),
alpha = .1) +
geom_point(data = film_noms_merged, size = 0.1)
film_noms_merged %>%
add_fitted_draws(film_noms_merged, n = 50) %>%
ggplot(aes(x = weighted_average_vote, y = no_of_nominations, color = genre)) +
geom_line(aes(y = .value, group = paste(genre, .draw)),
alpha = .1) +
geom_point(data = film_noms_merged, size = 0.1)
film_noms_merged %>%
add_fitted_draws(bayes_model_2, n = 50) %>%
ggplot(aes(x = weighted_average_vote, y = no_of_nominations, color = genre)) +
geom_line(aes(y = .value, group = paste(genre, .draw)),
alpha = .1) +
geom_point(data = film_noms_merged, size = 0.1)
labs(x = "\n IMDb Average Ratings", y = "Number of Oscar Nominations \n",
title = "Bayesian Poisson: Average Ratings vs Nominations \n") +
theme(plot.title = element_text(hjust = 0.5),
axis.title.x = element_text(face="bold", size = 11),
axis.title.y = element_text(face="bold", size = 11))
genre_df = filter(film_noms_merged, genre %in% c("Drama", "Animation", "Horror"))
View(genre_df)
genre_df %>%
add_fitted_draws(bayes_model_2, n = 50) %>%
ggplot(aes(x = weighted_average_vote, y = no_of_nominations, color = genre)) +
geom_line(aes(y = .value, group = paste(genre, .draw)),
alpha = .1) +
geom_point(data = genre_df, size = 0.1)
labs(x = "\n IMDb Average Ratings", y = "Number of Oscar Nominations \n",
title = "Bayesian Poisson: Average Ratings vs Nominations \n") +
theme(plot.title = element_text(hjust = 0.5),
axis.title.x = element_text(face="bold", size = 11),
axis.title.y = element_text(face="bold", size = 11))
bayes_model_prior_2 <- stan_glm(no_of_nominations ~ weighted_average_vote + genre,
data = genre_df,
family = poisson,
prior_intercept = normal(1, 0.5, autoscale = TRUE),
prior = normal(0.5, 0.25, autoscale = TRUE),
chains = 1, iter = 3000*2, seed = 130500,
prior_PD = TRUE)
bayes_model_2 <- update(bayes_model_prior_2, prior_PD = FALSE)
genre_df %>%
add_fitted_draws(bayes_model_2, n = 50) %>%
ggplot(aes(x = weighted_average_vote, y = no_of_nominations, color = genre)) +
geom_line(aes(y = .value, group = paste(genre, .draw)),
alpha = .1) +
geom_point(data = genre_df, size = 0.1)
labs(x = "\n IMDb Average Ratings", y = "Number of Oscar Nominations \n",
title = "Bayesian Poisson: Average Ratings vs Nominations \n") +
theme(plot.title = element_text(hjust = 0.5),
axis.title.x = element_text(face="bold", size = 11),
axis.title.y = element_text(face="bold", size = 11))
View(film_noms_merged)
table(film_noms_merged$genre)
genre_df = filter(film_noms_merged, genre %in% c("Crime", "Animation", "Horror"))
bayes_model_prior_2 <- stan_glm(no_of_nominations ~ weighted_average_vote + genre,
data = genre_df,
family = poisson,
prior_intercept = normal(1, 0.5, autoscale = TRUE),
prior = normal(0.5, 0.25, autoscale = TRUE),
chains = 1, iter = 3000*2, seed = 130500,
prior_PD = TRUE)
bayes_model_2 <- update(bayes_model_prior_2, prior_PD = FALSE)
genre_df %>%
add_fitted_draws(bayes_model_2, n = 50) %>%
ggplot(aes(x = weighted_average_vote, y = no_of_nominations, color = genre)) +
geom_line(aes(y = .value, group = paste(genre, .draw)),
alpha = .1) +
geom_point(data = genre_df, size = 0.1)
labs(x = "\n IMDb Average Ratings", y = "Number of Oscar Nominations \n",
title = "Bayesian Poisson: Average Ratings vs Nominations \n") +
theme(plot.title = element_text(hjust = 0.5),
axis.title.x = element_text(face="bold", size = 11),
axis.title.y = element_text(face="bold", size = 11))
table(film_noms_merged$genre)
genre_df = filter(film_noms_merged, genre %in% c("Crime", "Animation", "Action"))
genre_df %>%
add_fitted_draws(bayes_model_2, n = 50) %>%
ggplot(aes(x = weighted_average_vote, y = no_of_nominations, color = genre)) +
geom_line(aes(y = .value, group = paste(genre, .draw)),
alpha = .1) +
geom_point(data = genre_df, size = 0.1)
bayes_model_prior_2 <- stan_glm(no_of_nominations ~ weighted_average_vote + genre,
data = genre_df,
family = poisson,
prior_intercept = normal(1, 0.5, autoscale = TRUE),
prior = normal(0.5, 0.25, autoscale = TRUE),
chains = 1, iter = 3000*2, seed = 130500,
prior_PD = TRUE)
bayes_model_2 <- update(bayes_model_prior_2, prior_PD = FALSE)
genre_df %>%
add_fitted_draws(bayes_model_2, n = 50) %>%
ggplot(aes(x = weighted_average_vote, y = no_of_nominations, color = genre)) +
geom_line(aes(y = .value, group = paste(genre, .draw)),
alpha = .1) +
geom_point(data = genre_df, size = 0.1)
labs(x = "\n IMDb Average Ratings", y = "Number of Oscar Nominations \n",
title = "Bayesian Poisson: Average Ratings vs Nominations \n") +
theme(plot.title = element_text(hjust = 0.5),
axis.title.x = element_text(face="bold", size = 11),
axis.title.y = element_text(face="bold", size = 11))
genre_df = filter(film_noms_merged, genre %in% c("Comedy", "Animation", "Action"))
bayes_model_prior_2 <- stan_glm(no_of_nominations ~ weighted_average_vote + genre,
data = genre_df,
family = poisson,
prior_intercept = normal(1, 0.5, autoscale = TRUE),
prior = normal(0.5, 0.25, autoscale = TRUE),
chains = 1, iter = 3000*2, seed = 130500,
prior_PD = TRUE)
bayes_model_2 <- update(bayes_model_prior_2, prior_PD = FALSE)
genre_df %>%
add_fitted_draws(bayes_model_2, n = 50) %>%
ggplot(aes(x = weighted_average_vote, y = no_of_nominations, color = genre)) +
geom_line(aes(y = .value, group = paste(genre, .draw)),
alpha = .1) +
geom_point(data = genre_df, size = 0.1)
labs(x = "\n IMDb Average Ratings", y = "Number of Oscar Nominations \n",
title = "Bayesian Poisson: Average Ratings vs Nominations \n") +
theme(plot.title = element_text(hjust = 0.5),
axis.title.x = element_text(face="bold", size = 11),
axis.title.y = element_text(face="bold", size = 11))
# references: https://biostat.app.vumc.org/wiki/pub/Main/StatisticalComputingSeries/bayes_reg_rstanarm.html
summary(bayes_model)
# check fit vs distribution of data.
pp_check(bayes_model)
posterior_vs_prior(bayes_model, pars=c("weighted_average_vote"), group_by_parameter = TRUE)
stan_hist(bayes_model, pars=c("weighted_average_vote"), bins=40) + ggtitle("Histogram of posterior slope")
abline(0.6)
# references: https://biostat.app.vumc.org/wiki/pub/Main/StatisticalComputingSeries/bayes_reg_rstanarm.html
summary(bayes_model)
# check fit vs distribution of data.
pp_check(bayes_model)
posterior_vs_prior(bayes_model, pars=c("weighted_average_vote"), group_by_parameter = TRUE)
stan_hist(bayes_model, pars=c("weighted_average_vote"), bins=40) + ggtitle("Histogram of posterior slope")
abline(v = 0.6)
# references: https://biostat.app.vumc.org/wiki/pub/Main/StatisticalComputingSeries/bayes_reg_rstanarm.html
summary(bayes_model)
# check fit vs distribution of data.
pp_check(bayes_model)
posterior_vs_prior(bayes_model, pars=c("weighted_average_vote"), group_by_parameter = TRUE)
stan_hist(bayes_model, pars=c("weighted_average_vote"), bins=40) + ggtitle("Histogram of posterior slope") + geom_abline(0.6)
# references: https://biostat.app.vumc.org/wiki/pub/Main/StatisticalComputingSeries/bayes_reg_rstanarm.html
summary(bayes_model)
# check fit vs distribution of data.
pp_check(bayes_model)
posterior_vs_prior(bayes_model, pars=c("weighted_average_vote"), group_by_parameter = TRUE)
stan_hist(bayes_model, pars=c("weighted_average_vote"), bins=40) + ggtitle("Histogram of posterior slope") + geom_vline(0.6)
# references: https://biostat.app.vumc.org/wiki/pub/Main/StatisticalComputingSeries/bayes_reg_rstanarm.html
summary(bayes_model)
# check fit vs distribution of data.
pp_check(bayes_model)
posterior_vs_prior(bayes_model, pars=c("weighted_average_vote"), group_by_parameter = TRUE)
stan_hist(bayes_model, pars=c("weighted_average_vote"), bins=40) + ggtitle("Histogram of posterior slope") + geom_vline(xintercept= 0.6)
stan_hist(bayes_model, pars=c("(Intercept)"), bins=40) + ggtitle("Histogram of posterior intercept")
bayes_model$coefficients
bayes_model$coefficients[2]
# references: https://biostat.app.vumc.org/wiki/pub/Main/StatisticalComputingSeries/bayes_reg_rstanarm.html
summary(bayes_model)
# check fit vs distribution of data.
pp_check(bayes_model)
posterior_vs_prior(bayes_model, pars=c("weighted_average_vote"), group_by_parameter = TRUE)
stan_hist(bayes_model, pars=c("weighted_average_vote"), bins=40) + ggtitle("Histogram of posterior slope") + geom_vline(xintercept = bayes_model$coefficients[2])
stan_hist(bayes_model, pars=c("(Intercept)"), bins=40) + ggtitle("Histogram of posterior intercept") + geom_vline(xintercept = bayes_model$coefficients[1])
# references: https://biostat.app.vumc.org/wiki/pub/Main/StatisticalComputingSeries/bayes_reg_rstanarm.html
summary(bayes_model)
# check fit vs distribution of data.
pp_check(bayes_model)
posterior_vs_prior(bayes_model, pars=c("weighted_average_vote"), group_by_parameter = TRUE)
stan_hist(bayes_model, pars=c("weighted_average_vote"), bins=40) + ggtitle("Histogram of posterior slope") + geom_vline(xintercept = bayes_model$coefficients[2])
stan_hist(bayes_model, pars=c("(Intercept)"), bins=40) + ggtitle("Histogram of posterior intercept") + geom_vline(xintercept = bayes_model$coefficients[1], color = "dark blue")
# references: https://biostat.app.vumc.org/wiki/pub/Main/StatisticalComputingSeries/bayes_reg_rstanarm.html
summary(bayes_model)
# check fit vs distribution of data.
pp_check(bayes_model)
posterior_vs_prior(bayes_model, pars=c("weighted_average_vote"), group_by_parameter = TRUE)
stan_hist(bayes_model, pars=c("weighted_average_vote"), bins=40) + ggtitle("Histogram of posterior slope") + geom_vline(xintercept = bayes_model$coefficients[2])
stan_hist(bayes_model, pars=c("(Intercept)"), bins=40) + ggtitle("Histogram of posterior intercept", color = "green") + geom_vline(xintercept = bayes_model$coefficients[1], color = "dark blue")
# references: https://biostat.app.vumc.org/wiki/pub/Main/StatisticalComputingSeries/bayes_reg_rstanarm.html
summary(bayes_model)
# check fit vs distribution of data.
pp_check(bayes_model)
posterior_vs_prior(bayes_model, pars=c("weighted_average_vote"), group_by_parameter = TRUE)
stan_hist(bayes_model, pars=c("weighted_average_vote"), bins=40) + ggtitle("Histogram of posterior slope") + geom_vline(xintercept = bayes_model$coefficients[2], color = "green")
stan_hist(bayes_model, pars=c("(Intercept)"), bins=40) + ggtitle("Histogram of posterior intercept") + geom_vline(xintercept = bayes_model$coefficients[1], color = "dark blue")
film_noms_merged %>%
add_fitted_draws(bayes_model, n = 100) %>%
ggplot(aes(x = weighted_average_vote, y = no_of_nominations)) +
theme_fivethirtyeight() +
geom_line(aes(y = .value, group = .draw),
alpha = .1, size = 0.01, color = "#3C2FDE") +
geom_point(data = film_noms_merged, size = 1) +
labs(x = "\n IMDb Average Ratings", y = "Number of Oscar Nominations \n",
title = "Bayesian Poisson: Average Ratings vs Nominations \n") +
theme(plot.title = element_text(hjust = 0.5),
axis.title.x = element_text(face="bold", size = 11),
axis.title.y = element_text(face="bold", size = 11))
film_noms_merged %>%
add_fitted_draws(bayes_model, n = 100) %>%
ggplot(aes(x = weighted_average_vote, y = no_of_nominations)) +
theme_fivethirtyeight() +
geom_line(aes(y = .value, group = .draw),
alpha = .01, size = 0.1, color = "#3C2FDE") +
geom_point(data = film_noms_merged, size = 1) +
labs(x = "\n IMDb Average Ratings", y = "Number of Oscar Nominations \n",
title = "Bayesian Poisson: Average Ratings vs Nominations \n") +
theme(plot.title = element_text(hjust = 0.5),
axis.title.x = element_text(face="bold", size = 11),
axis.title.y = element_text(face="bold", size = 11))
film_noms_merged %>%
add_fitted_draws(bayes_model, n = 100) %>%
ggplot(aes(x = weighted_average_vote, y = no_of_nominations)) +
theme_fivethirtyeight() +
geom_line(aes(y = .value, group = .draw),
alpha = .5, size = 0.1, color = "#3C2FDE") +
geom_point(data = film_noms_merged, size = 1) +
labs(x = "\n IMDb Average Ratings", y = "Number of Oscar Nominations \n",
title = "Bayesian Poisson: Average Ratings vs Nominations \n") +
theme(plot.title = element_text(hjust = 0.5),
axis.title.x = element_text(face="bold", size = 11),
axis.title.y = element_text(face="bold", size = 11))
film_noms_merged %>%
add_fitted_draws(bayes_model, n = 100) %>%
ggplot(aes(x = weighted_average_vote, y = no_of_nominations)) +
theme_fivethirtyeight() +
geom_line(aes(y = .value, group = .draw),
alpha = .1, size = 0.1, color = "#3C2FDE") +
geom_point(data = film_noms_merged, size = 1) +
labs(x = "\n IMDb Average Ratings", y = "Number of Oscar Nominations \n",
title = "Bayesian Poisson: Average Ratings vs Nominations \n") +
theme(plot.title = element_text(hjust = 0.5),
axis.title.x = element_text(face="bold", size = 11),
axis.title.y = element_text(face="bold", size = 11))
# references: https://biostat.app.vumc.org/wiki/pub/Main/StatisticalComputingSeries/bayes_reg_rstanarm.html
summary(bayes_model)
# check fit vs distribution of data.
pp_check(bayes_model)
posterior_vs_prior(bayes_model, pars=c("weighted_average_vote"), group_by_parameter = TRUE)
stan_hist(bayes_model, pars=c("weighted_average_vote"), bins=40) + ggtitle("Histogram of posterior slope") + geom_vline(xintercept = bayes_model$coefficients[2], color = "green")
stan_hist(bayes_model, pars=c("(Intercept)"), bins=40) + ggtitle("Histogram of posterior intercept") + geom_vline(xintercept = bayes_model$coefficients[1], color = "dark blue")
library(dplyr)
library(stringr)
library(ggplot2)
library(ggthemes)
library(rstanarm)
library(rstan)
library(bayesplot)
library(tidyverse)
library(tidybayes)
oscar_db = read.csv("/Users/cedriclam/Documents/bayes_final/the_oscar_award.csv", fileEncoding = "UTF-8")
oscar_db = subset(oscar_db, select = -c(year_ceremony, ceremony) )
oscar_db
nom_df = subset(oscar_db, select = -c(name) )
# filter blank rows
nom_df = filter(nom_df, film != "")
film_noms = nom_df %>% group_by(film,year_film)%>%mutate(no_of_nominations=n())
film_noms = film_noms %>% distinct(film,year_film, .keep_all = TRUE)
film_noms = subset(film_noms, select = -c(category, winner) )
film_noms$film = tolower(film_noms$film)
# load imdb data
ratings = read.csv("/Users/cedriclam/Documents/bayes_final/IMDb_ratings.csv", fileEncoding = "UTF-8")
movies = read.csv("/Users/cedriclam/Documents/bayes_final/IMDb_movies.csv")
imdb = merge(x = movies, y = ratings, by.x = "imdb_title_id", by.y = "imdb_title_id", all.x = TRUE)
imdb = imdb %>% separate(genre, c("genre", "2", "3"), ",")
imdb = subset(imdb, select = c(original_title, year, duration, genre, weighted_average_vote))
imdb$original_title = tolower(imdb$original_title)
film_noms_merged = merge(x = film_noms, y = imdb, by.x = c("film", "year_film"), by.y = c("original_title", "year"), all.x = TRUE)
# left with 4934 rows. Now pick only the ones that have a matching rating.
film_noms_merged = filter(film_noms_merged, weighted_average_vote != "")
# now we're left with 2,557 rows.
film_noms_merged$film = str_to_title(film_noms_merged$film)
film_noms_merged
# done with the cleaning part.
freq_model = glm(no_of_nominations ~ weighted_average_vote, film_noms_merged, family = poisson)
summary(freq_model)
hist(film_noms_merged$no_of_nominations,
xlab = "Number of Nominations",
main = "Distribution of Oscar Nomination Count")
ggplot(freq_model$model) +
theme_fivethirtyeight() +
geom_point(aes(weighted_average_vote, no_of_nominations), size = 1) +
geom_line(aes(weighted_average_vote, fitted), color = "dark red", alpha = 2) +
labs(x = "\n IMDb Average Ratings", y = "Number of Oscar Nominations \n",
title = "Frequentist Poisson: Average Ratings vs Nominations \n") +
theme(plot.title = element_text(hjust = 0.5),
axis.title.x = element_text(face="bold", size = 11),
axis.title.y = element_text(face="bold", size = 11))
freq_model$model$fitted <- predict(freq_model, type = "response")
# ggplot2 Plot:
ggplot(freq_model$model) +
theme_fivethirtyeight() +
geom_point(aes(weighted_average_vote, no_of_nominations), size = 1) +
geom_line(aes(weighted_average_vote, fitted), color = "dark red", alpha = 2) +
labs(x = "\n IMDb Average Ratings", y = "Number of Oscar Nominations \n",
title = "Frequentist Poisson: Average Ratings vs Nominations \n") +
theme(plot.title = element_text(hjust = 0.5),
axis.title.x = element_text(face="bold", size = 11),
axis.title.y = element_text(face="bold", size = 11))
# https://www.bayesrulesbook.com/chapter-12.html#ch12-simulation
# Monte Carlo Markov Chain to simulate the prior
# https://www.bayesrulesbook.com/chapter-6.html#markov-chains-via-rstan
# prior intercept (starting point for nominations) is at 1.
# prior slope is around 0.5, sd = 0.25
bayes_model_prior <- stan_glm(no_of_nominations ~ weighted_average_vote,
data = film_noms_merged,
family = poisson,
prior_intercept = normal(1, 0.5, autoscale = TRUE),
prior = normal(0.5, 0.25, autoscale = TRUE),
chains = 2, iter = 5000*2, seed = 130500,
prior_PD = TRUE)
prior_summary(bayes_model_prior)
film_noms_merged %>%
add_fitted_draws(bayes_model_prior, n = 100) %>%
ggplot(aes(x = weighted_average_vote, y = no_of_nominations)) +
theme_fivethirtyeight() +
geom_line(aes(y = .value, group = .draw), alpha = 0.5) +
ylim(0, 20) +
theme(plot.title = element_text(hjust = 0.5),
axis.title.x = element_text(face="bold", size = 11),
axis.title.y = element_text(face="bold", size = 11))
bayes_model <- update(bayes_model_prior, prior_PD = FALSE)
# references: https://biostat.app.vumc.org/wiki/pub/Main/StatisticalComputingSeries/bayes_reg_rstanarm.html
summary(bayes_model)
# check fit vs distribution of data.
pp_check(bayes_model)
posterior_vs_prior(bayes_model, pars=c("weighted_average_vote"), group_by_parameter = TRUE)
stan_hist(bayes_model, pars=c("weighted_average_vote"), bins=40) + ggtitle("Histogram of posterior slope") + geom_vline(xintercept = bayes_model$coefficients[2], color = "green")
stan_hist(bayes_model, pars=c("(Intercept)"), bins=40) + ggtitle("Histogram of posterior intercept") + geom_vline(xintercept = bayes_model$coefficients[1], color = "dark blue")
freq_model$model$fitted <- predict(freq_model, type = "response")
# ggplot2 Plot:
ggplot(freq_model$model) +
theme_fivethirtyeight() +
geom_point(aes(jitter(weighted_average_vote), jitter(no_of_nominations)), size = 1) +
geom_line(aes(weighted_average_vote, fitted), color = "dark red", alpha = 2) +
labs(x = "\n IMDb Average Ratings", y = "Number of Oscar Nominations \n",
title = "Frequentist Poisson: Average Ratings vs Nominations \n") +
theme(plot.title = element_text(hjust = 0.5),
axis.title.x = element_text(face="bold", size = 11),
axis.title.y = element_text(face="bold", size = 11))
freq_model$model$fitted <- predict(freq_model, type = "response")
# ggplot2 Plot:
ggplot(freq_model$model) +
theme_fivethirtyeight() +
geom_point(aes(jitter(weighted_average_vote), no_of_nominations), size = 1) +
geom_line(aes(weighted_average_vote, fitted), color = "dark red", alpha = 2) +
labs(x = "\n IMDb Average Ratings", y = "Number of Oscar Nominations \n",
title = "Frequentist Poisson: Average Ratings vs Nominations \n") +
theme(plot.title = element_text(hjust = 0.5),
axis.title.x = element_text(face="bold", size = 11),
axis.title.y = element_text(face="bold", size = 11))
film_noms_merged %>%
add_fitted_draws(bayes_model, n = 100) %>%
ggplot(aes(x = weighted_average_vote, y = no_of_nominations)) +
theme_fivethirtyeight() +
geom_line(aes(y = .value, group = .draw),
alpha = .01, size = 0.1, color = "#3C2FDE") +
geom_point(data = film_noms_merged, size = 1) +
labs(x = "\n IMDb Average Ratings", y = "Number of Oscar Nominations \n",
title = "Bayesian Poisson: Average Ratings vs Nominations \n") +
theme(plot.title = element_text(hjust = 0.5),
axis.title.x = element_text(face="bold", size = 11),
axis.title.y = element_text(face="bold", size = 11))
film_noms_merged %>%
add_fitted_draws(bayes_model, n = 100) %>%
ggplot(aes(x = weighted_average_vote, y = no_of_nominations)) +
theme_fivethirtyeight() +
geom_line(aes(y = .value, group = .draw),
alpha = .1, size = 0.1, color = "#3C2FDE") +
geom_point(data = film_noms_merged, size = 1) +
labs(x = "\n IMDb Average Ratings", y = "Number of Oscar Nominations \n",
title = "Bayesian Poisson: Average Ratings vs Nominations \n") +
theme(plot.title = element_text(hjust = 0.5),
axis.title.x = element_text(face="bold", size = 11),
axis.title.y = element_text(face="bold", size = 11))
View(film_noms_merged)
View(imdb)
